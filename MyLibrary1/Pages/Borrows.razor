@page "/borrows"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h4>Find Borrow By Id</h4>

<div class="input group mb-3">
    <select class="form-select" @bind="searchBorrowId">
        <option value="">Select Borrow</option>
        @if (borrows != null)
        {
            @foreach(var borrow in borrows)
            {
                <option value="@borrow.BorrowId">@borrow.BorrowId</option>
            }
        }
        </select>
        <button class="btn btn-info" @onclick="GetBorrowById">Search</button>
</div>
@if (!string.IsNullOrEmpty(getMessage))
{
    <div class="alert alert-warning">@getMessage</div>
}
@if (foundBorrow != null)
{
    <div class="card" style="width:180px; display:flex; flex-direction:column;">
        <img src="@($"https://localhost:7161/{foundBorrow.CoverImagePath}")" alt="Book Cover" />
        <div class="card-body" style="flex-grow:1; display:flex; flex-direction:column; justify-content:space-between;">
            <p class="card-title">Borrow: @foundBorrow.BorrowId</p>
            <p class="card-text">Book: @foundBorrow.BookId</p>
            <p class="card-text">Member: @foundBorrow.MemberId</p>
            <p class="card-text">Borrow Date: @foundBorrow.BorrowDate</p>
            <p class="card-text">Return Date: @foundBorrow.ReturnDate</p>
        </div>
    </div>
}

<h4> Add New Borrow</h4>

<div class="input group mb-3">
    <select class="form-select" @bind="newBookId" >
        <option value="">Select Book</option>
        @if(books != null)
        {
          @foreach(var book in books)
            {
                <option value="@book.BookId">@book.BookId - @book.Title</option>
            }
        }
        </select>
</div>
<div class="input group mb-3">
    <select class="form-select" @bind="newMemberId">
        <option value="">Select Member</option>
        @if (members != null)
        {
            @foreach (var member in members)
            {
                <option value="@member.MemberId">@member.MemberId - @member.MemberName</option>
            }
        }
        </select>
</div>
<div class="input group mb-3">
    <label for="newBorrowDate" class="form-label">Borrow Date</label>
    <input type="datetime-local" class="form-control" placeholder="Enter Borrow Date" @bind="newBorrowDate" />
</div>
<div class="input group mb-3">
    <label for="newReturnDate" class="form-label">Return Date</label>
    <input type="datetime-local" class="form-control" placeholder="Enter Return Date" @bind="newReturnDate" />
</div>
<button class="btn btn-success" @onclick="AddBorrow">Add</button>

@if (!string.IsNullOrEmpty(addMessage))
{
    <div class="alert alert-warning mt-2">@addMessage</div>
}

<h4>Update Borrow</h4>

<div class="input group  mb-3">
    <select class="form-select" @bind="updateBorrowId">
        <option value="">Select Borrow</option>
        @if (borrows != null)
        {
            @foreach (var borrow in borrows)
            {
                <option value="@borrow.BorrowId">@borrow.BorrowId</option>
            }
        }
    </select>
</div>
<div class=" input group  mb-3">
    <select class="form-select" @bind="updateBookId">
        <option value="">Select Book</option>
        @if (books != null)
        {
            @foreach (var book in books)
            {
                <option value="@book.BookId">@book.BookId - @book.Title</option>
            }
        }
    </select>
</div>
<div class="input group  mb-3">
    <select class="form-select" @bind="updateMemberId">
        <option value="">Select Member</option>
        @if (members != null)
        {
            @foreach (var member in members)
            {
                <option value="@member.MemberId">@member.MemberId - @member.MemberName</option>
            }
        }
    </select>
</div>
<div class="input group  mb-3">
    <label for="updateBorrowDate" class="form-label">Borrow Date</label>
    <input type="datetime-local" class="form-control" placeholder="Enter Borrow Date" @bind="updateBorrowDate" />
</div>
<div class="input group  mb-3">
    <label for="updateReturnDate" class="form-label">Return Date</label>
    <input type="datetime-local" class="form-control" placeholder="Enter ReturnDate" @bind="updateReturnDate" />
</div>
<button class="btn btn-warning" @onclick="UpdateBorrow">Update</button>

@if (!string.IsNullOrEmpty(updateMessage))
{
    <div class="alert alert-warning mt-2">@updateMessage</div>
}

<h4>Delete Borrow</h4>

<div class="input group mb-3">
    <select class="form-select" @bind="deleteBorrowId">
        <option value="">Select Borrow</option>
        @if (borrows != null)
        {
            @foreach (var borrow in borrows)
            {
                <option value="@borrow.BorrowId">@borrow.BorrowId</option>
            }
        }
    </select>
</div>
<button class="btn btn-danger" @onclick="DeleteBorrow">Delete</button>

@if (!string.IsNullOrEmpty(deleteMessage))
{
    <div class="alert alert-warning">@deleteMessage</div>
}

<h3>Borrows</h3>

<button class="btn btn-primary" @onclick="ToggleBorrows">@(showBorrows ? "Hide" : "Get")</button>
@if(showBorrows){
@if (borrows == null)
{
    <p><em>Press the button</em></p>
}
else if (borrows.Count == 0)
{
    <p>No borrows found.</p>
}
else
{
        <div class="d-flex flex-wrap gap-3 align-items-stretch">
            @foreach (var borrow in borrows)
            {
                <div class="card" style="width:180px; display:flex; flex-direction:column;">
                    <img src="@($"https://localhost:7161/{borrow.CoverImagePath}")" alt="Book Cover" />
                    <div class="card-body" style="flex-grow:1; display:flex; flex-direction:column; justify-content:space-between;">
                        <h5 class="card-title">Borrow: @borrow.BorrowId</h5>
                        <p class="card-text">Book: @borrow.BookId</p>
                        <p class="card-text">Member: @borrow.MemberId</p>
                        <p class="card-text">Borrow Date: @borrow.BorrowDate</p>
                        <p class="card-text">Return Date: @borrow.ReturnDate</p>
                    </div>
                </div>
            }
        </div>
}
}

@code {
    private List<MemberDto> members = new();
    private List<BookDto> books = new();
    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }
        await GetBorrows();
        await GetMembers();
        await GetBooks();
        showBorrows = true;
    }
    private async Task GetMembers()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7161/api/members");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            members = await response.Content.ReadFromJsonAsync<List<MemberDto>>();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error fetching members: {error}");
        }
    }
    private async Task GetBooks()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken"); 
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7161/api/books");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            books = await response.Content.ReadFromJsonAsync<List<BookDto>>();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error fetching books: {error}");
        }
    }

    private List<BorrowDto> borrows;
    private bool showBorrows = false;

    private async Task ToggleBorrows()
    {
        if(!showBorrows)
        {
            await GetBorrows();
            showBorrows = true;
        }
        else
        {
            showBorrows = false;
        }
    }
    private async Task GetBorrows()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (string.IsNullOrWhiteSpace(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7161/api/borrows");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                borrows = await response.Content.ReadFromJsonAsync<List<BorrowDto>>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Navigation.NavigateTo("/login");
            }
        }catch(Exception ex)
        {
            Console.WriteLine("Error loading borrows:" +ex.Message);
        }
    }

    private int? newBookId;
    private int? newMemberId;
    private DateTime? newBorrowDate;
    private DateTime? newReturnDate;
    private string addMessage;

    private async Task AddBorrow()
    {
        if (newBookId == null || newMemberId == null || newBorrowDate == null || newReturnDate == null)
        {
            addMessage = "Failed.";
            StateHasChanged();
            return;
        }

        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        var newBorrowDto = new BorrowDto
        {
            BookId = newBookId.Value,
            MemberId = newMemberId.Value,
            BorrowDate = newBorrowDate.Value,
            ReturnDate = newReturnDate.Value,
        };
        try{
            var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7161/api/borrows");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            request.Content = JsonContent.Create(newBorrowDto);
            var response = await Http.SendAsync(request);
            addMessage = "";

            if (response.IsSuccessStatusCode)
            {
                addMessage = "Successfully added.";
            }
            else
            {
                addMessage = "Borrow could not add.";
                Console.WriteLine("Borrow couldnot add.");
            }
        }catch (Exception ex)
        {
            addMessage = "Failed";
            Console.WriteLine("Exception" + ex.Message);
        }
    }

    private int? searchBorrowId;
    private BorrowDto? foundBorrow;
    private string getMessage;

    private async Task GetBorrowById()
    {
        getMessage = "";
        foundBorrow = null;
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (string.IsNullOrWhiteSpace(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }
        var request = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7161/api/borrows/{searchBorrowId}");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        try
        {
            var response = await Http.SendAsync(request);
            getMessage = "";
            if (response.IsSuccessStatusCode)
            {
                foundBorrow = await response.Content.ReadFromJsonAsync<BorrowDto>();
                getMessage = "Borrow found successfully.";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                getMessage = "Borrow not found.";
                foundBorrow = null;
                Console.WriteLine("Borrow not found.");
            }
            else
            {
                getMessage = "Error occured while fetching the borrow";
                foundBorrow = null;
            }
        }catch(Exception ex)
        {
            getMessage = "Failed";
            Console.WriteLine("Exception" + ex.Message);
        }

    }
    private int? updateBorrowId;
    private int? updateBookId;
    private int? updateMemberId;
    private DateTime? updateBorrowDate;
    private DateTime? updateReturnDate;
    private string updateMessage;

    private async Task UpdateBorrow()
    {
        if (updateBookId == null || updateMemberId == null || updateBorrowDate == null || updateReturnDate == null)
        {
            updateMessage = "Failed.";
            StateHasChanged();
            return;
        }
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (string.IsNullOrWhiteSpace(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }
        var updateDto = new BorrowDto
        {
            BookId = updateBookId.Value,
            MemberId = updateMemberId.Value,
            BorrowDate = updateBorrowDate.Value,
            ReturnDate = updateReturnDate.Value,
        };

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Put, $"https://localhost:7161/api/borrows/{updateBorrowId}");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            request.Content = JsonContent.Create(updateDto);
            var response = await Http.SendAsync(request);
            updateMessage = "";

            if (response.IsSuccessStatusCode)
            {
                updateMessage = "Borrow updated successfully.";
                await GetBorrows();
            }
            else
            {
                updateMessage = "Borrow could not update.";
                Console.WriteLine("Borrow couldnot update.");
            }
        }
        catch (Exception ex)
        {
            updateMessage = "Failed";
            Console.WriteLine("Exception" + ex.Message);
        }

    }

    private int? deleteBorrowId;
    private string deleteMessage;

    private async Task DeleteBorrow()
    {
        deleteMessage = "";

        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (string.IsNullOrWhiteSpace(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }
        var request = new HttpRequestMessage(HttpMethod.Delete, $"https://localhost:7161/api/borrows/{deleteBorrowId}");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            deleteMessage = "Borrow deleted successfully.";
            await GetBorrows();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            deleteMessage = "Borrow not found.";
        }
        else
        {
            deleteMessage = "Delete failed.";
        }
    }

    public class AddBorrowDto
    {
        public int BorrowId { get; set; }
        public int BookId { get; set; }
        public int MemberId { get; set; }
        public DateTime BorrowDate { get; set; }
        public DateTime ReturnDate { get; set; }

    }
    public class BorrowDto 
    {
        public int BorrowId { get; set; }
        public int BookId { get; set; }
        public int MemberId { get; set; }
        public DateTime BorrowDate { get; set; }
        public DateTime ReturnDate { get; set; }
        public string? CoverImagePath { get; set; }

    }
    public class MemberDto
    {
        public int MemberId { get; set; }
        public string MemberName { get; set; }
        public string Email { get; set; }
        public int PhoneNumber { get; set; }
        public DateTime MembershipDate { get; set; }
    }

    public class BookDto
    {
        public string Title { get; set; }
        public int AuthorId { get; set; }
        public int CategoryId { get; set; }
        public int Stock { get; set; }
        public int BookId { get; set; }
        public string CoverImagePath { get; set; }

    }
}
