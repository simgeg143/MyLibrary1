@page "/login"

@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@using MyLibrary1.Providers
@inject AuthenticationStateProvider AuthProvider


<h3>Login</h3>

<div>
    <input placeholder="Username" @bind="username" />
</div>
<div>
    <input type="password" placeholder="Password" @bind="password" />
</div>
<button @onclick="LoginUser">Log in</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red">@errorMessage</p>
}

@code {
    private string username;
    private string password;
    private string errorMessage;

    private async Task LoginUser()
    {
        errorMessage = "";

        var loginModel = new
        {
            Username = username,
            Password = password
        };

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7161/api/Authorization/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadFromJsonAsync<TokenResponse>();

                if (token != null && !string.IsNullOrEmpty(token.Token))
                {
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", token.Token);

                    if(AuthProvider is CustomAuthStateProvider customProvider)
                    {
                        customProvider.NotifyUserAuthentication(username);
                    }

                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Token could not be taken.";
                }
            }
            else
            {
                errorMessage = "Log in failed. Username or password is false.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error happened: " + ex.Message;
        }
    }

    public class TokenResponse
    {
        public string Token { get; set; }
    }
}
