@page "/books"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Forms

<h4>Find Book by Id</h4>

<div class="input group mb-3">
    <input type="number" class="form-control" placeholder="Enter Book Id" @bind="searchBookId" />
    <button class="btn btn-info" @onclick="GetBookById">Search</button>
</div>
@if (!string.IsNullOrEmpty(getMessage))
{
    <div class="alert alert-warning mt-2">@getMessage</div>
}

@if (foundBook != null)
{
        <div class="card" style="width:180px; display:flex; flex-direction:column;">
         <img src="@($"https://localhost:7161/{foundBook.CoverImagePath}")" alt="Book Cover" />
        <div class="card-body" style="flex-grow:1; display:flex; flex-direction:column; justify-content:space-between;">
            <h5 class="card-title">@foundBook.Title</h5>
            <p class="card-text">Book: @foundBook.BookId</p>
            <p class="card-text">Author: @foundBook.AuthorId</p>
            <p class="card-text">Category: @foundBook.CategoryId</p>
            <p class="card-text">Stock: @foundBook.Stock</p>
        </div>
    </div>
}


<h4>Add New Book</h4>

<div class="input group mb-3">
    <input type="text" class="form-control" placeholder="New Title" @bind="newTitle"/>
</div>
<div class="input group mb-3">
    <input type="number" class="form-control" placeholder="Enter Author Id" @bind="enterAuthorId"/>
</div>
<div class="input group mb-3">
    <input type="number" class="form-control" placeholder="Enter Category Id" @bind="enterCategoryId"/>
</div>
<div class="input group mb-3">
    <input type="number" class="form-control" placeholder="Enter Stock" @bind="enterStock"/>
</div>
<div class="input group mb-3">
    <InputFile OnChange="HandleFileSelected" />
</div>
<button class="btn btn-success" @onclick="AddBook">Add</button>
@if(!string.IsNullOrEmpty(addMessage))
{
    <div class=" alert alert-info mt-2">@addMessage</div>
}

<h4>Update Book</h4>

<div class="input group  mb-3">
    <select class="form-select" @bind="updateBookId">
        <option value="">Select Book</option>
        @if(books != null)
        {
            @foreach(var book in books)
            {
                <option value="@book.BookId">@book.BookId - @book.Title</option>
            }
        }
        </select>
</div>
<div class=" input group  mb-3">
    <input type="text" class="form-control" placeholder="Enter Title" @bind="updateTitle"/>
</div>
<div class="input group  mb-3">
    <input type="number" class="form-control" placeholder="Enter Author Id" @bind="updateAuthorId" />
</div>
<div class="input group  mb-3">
    <input type="number" class="form-control" placeholder="Enter Category Id" @bind="updateCategoryId" />
</div>
<div class="input group  mb-3">
    <input type="number" class="form-control" placeholder="Enter Stock" @bind="updateStock" />
</div>
<div class="input group mb-3">
    <InputFile OnChange="HandleUpdateFileSelected"/>
</div>
<button class="btn btn-warning" @onclick="UpdateBook">Update</button>

@if (!string.IsNullOrEmpty(updateMessage))
{
    <div class="alert alert-info mt-2">@updateMessage</div>
}

<h4>Delete Book</h4>

<div class="input group mb-3">
    <select class="form-select" @bind="deleteBookId">
        <option value="">Select Book</option>
        @if (books != null)
        {
            @foreach (var book in books)
            {
                <option value="@book.BookId">@book.BookId - @book.Title</option>
            }
        }
    </select>
</div>
<button class="btn btn-danger" @onclick="DeleteBook">Delete</button>

@if (!string.IsNullOrEmpty(deleteMessage))
{
    <div class="alert alert-warning">@deleteMessage</div>
}

<h3>Books</h3>

<button class="btn btn-primary" @onclick="ToggleBooks">@(showBooks ? "Hide" : "Get")</button>
@if(showBooks){
@if (books == null)
{
    <p><em>Press the button</em></p>
}
else if (books.Count == 0)
{
    <p>No books found.</p>
}
else
{
        <div class="d-flex flex-wrap gap-3 align-items-stretch">
            @foreach (var book in books)
            {
                <div class="card" style="width:180px; display:flex; flex-direction:column;">
                    <img src="@($"https://localhost:7161/{book.CoverImagePath}")" alt="Book Cover" />
                    <div class="card-body" style="flex-grow:1; display:flex; flex-direction:column; justify-content:space-between;">
                        <h5 class="card-title">@book.Title</h5>
                        <p class="card-text">Book: @book.BookId</p>
                        <p class="card-text">Author: @book.AuthorId</p>
                        <p class="card-text">Category: @book.CategoryId</p>
                        <p class="card-text">Stock: @book.Stock</p>
                    </div>
                </div>
            }
            </div>
    }
}


@code 
{
    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }
        await GetBooks();
        showBooks = true;
    }

    private List<BookDto> books;
    private bool showBooks = false;

    private async Task ToggleBooks()
    {
        if(!showBooks)
        {
            await GetBooks();
            showBooks = true;
        }
        else
        {
            showBooks = false;
        }
    }
    private async Task GetBooks()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (string.IsNullOrWhiteSpace(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7161/api/books");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                books = await response.Content.ReadFromJsonAsync<List<BookDto>>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading books:" + ex.Message);
        }
    }
  
    private string newTitle;
    private int? enterAuthorId;
    private int? enterCategoryId;
    private int? enterStock;
    private string addMessage;

    private async Task AddBook()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        var content = new MultipartFormDataContent();
        content.Add(new StringContent(newTitle), "Title");
        content.Add(new StringContent(enterAuthorId.Value.ToString()), "AuthorId");
        content.Add(new StringContent(enterCategoryId.Value.ToString()), "CategoryId");
        content.Add(new StringContent(enterStock.Value.ToString()), "Stock");

        if(selectedImageFile != null)
        {
            var stream = selectedImageFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedImageFile.ContentType);
            content.Add(fileContent, "CoverImage", selectedImageFile.Name);
        }
        var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7161/api/books");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        request.Content = content;

        var response = await Http.SendAsync(request);

        if(response.IsSuccessStatusCode)
        {
            addMessage = "Successfully added";
        }
        else
        {
            newTitle = null;
            Console.WriteLine("Book couldnot add.");
        }
    }

    IBrowserFile selectedImageFile;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedImageFile = e.File;
    }

    private int? searchBookId;
    private BookDto? foundBook;
    private string getMessage;

    private async Task GetBookById()
    {
        getMessage = "";
        foundBook = null;
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        if(string.IsNullOrWhiteSpace(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }

       
            var request = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7161/api/books/{searchBookId}");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
        try
        {
            var response = await Http.SendAsync(request);
            getMessage = "";
            if (response.IsSuccessStatusCode)
            {
                foundBook = await response.Content.ReadFromJsonAsync<BookDto>();
                getMessage = "Book found successfully.";
                await GetBooks();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                getMessage = "Book not found.";
                foundBook = null;
                Console.WriteLine("Book not found.");
            }
            else
            {
                getMessage = "Error occured while fetching the book";
                foundBook = null;
            }
        }catch(Exception ex)
        {
            getMessage = "Failed";
            Console.WriteLine("Exception" + ex.Message);
        }
    }

    private int? updateBookId;
    private string updateTitle;
    private int? updateAuthorId;
    private int? updateCategoryId;
    private int? updateStock;
    private string updateMessage;

    private async Task UpdateBook()
    {
        updateMessage = "";

        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (string.IsNullOrWhiteSpace(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(updateBookId.ToString()), "BookId");
        content.Add(new StringContent(updateTitle.ToString()), "Title");
        content.Add(new StringContent(updateAuthorId.ToString()), "AuthorId");
        content.Add(new StringContent(updateCategoryId.ToString()), "CategoryId");
        content.Add(new StringContent(updateStock.ToString()), "Stock");

        if(selectedUpdateFile != null)
        {
            var stream = selectedUpdateFile.OpenReadStream(5*1024*1024);
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedUpdateFile.ContentType);
            content.Add(fileContent, "CoverImage", selectedUpdateFile.Name);
        }


        var request = new HttpRequestMessage(HttpMethod.Put, $"https://localhost:7161/api/books/{updateBookId}");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        request.Content = content;

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            updateMessage = "Book updated successfully.";
            await GetBooks();
        }
        else
        {
            updateMessage = "Update failed.";
        }
    }
    private IBrowserFile selectedUpdateFile;

    private void HandleUpdateFileSelected(InputFileChangeEventArgs e)
    {
        selectedUpdateFile = e.File;
    }

    private int? deleteBookId;
    private string deleteMessage;

    private async Task DeleteBook()
    {
        deleteMessage="";

        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        if(string.IsNullOrWhiteSpace(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }
        var request = new HttpRequestMessage(HttpMethod.Delete, $"https://localhost:7161/api/books/{deleteBookId}");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            deleteMessage = "Book deleted successfully.";
            await GetBooks();
        }
        else if(response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            deleteMessage = "Book not found.";
        }
        else
        {
            deleteMessage = "Delete failed.";
        }
    }


    public class BookDto
    {
        public string Title { get; set; }
        public int AuthorId { get; set; }
        public int CategoryId { get; set; }
        public int Stock { get; set; }
        public int BookId { get; set; }
        public string CoverImagePath { get; set; }

    }
}
