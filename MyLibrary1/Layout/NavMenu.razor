@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@using System.Security.Claims
@using MyLibrary1.Providers
@inject IJSRuntime JS

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">MyLibrary1</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @if (user?.Identity?.IsAuthenticated == true)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center gap-2" href="" Match="NavLinkMatch.All">
                    <i class="fa-solid fa-user fa-2x"aria-hidden ="true"></i>
                    <span style="font-size:1.1rem;"> Hello, @user.Identity.Name</span>
                    </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="btn btn-link nav-link d-flex align-items-center gap-2 " @onclick="Logout" Match="NavLinkMatch.All">
                    <i class="fa-solid fa-right-from-bracket fa-2x" aria-hidden = "true"></i>
                    <span style="font-size:1.1rem;">Log out</span>
                    </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center gap-2 " href="login" Match="NavLinkMatch.All">
                    <i class="fa-solid fa-circle-user fa-2x"aria-hidden="true"></i>  
                    <span style="font-size:1.1rem;">Login</span>
                </NavLink>
            </div>
        }
            <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center gap-2 " href="" Match="NavLinkMatch.All">
                    <i class="fa-solid fa-house fa-2x" aria-hidden="true"></i> 
                    <span style="font-size:1.1rem;">Home</span>
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center gap-2" href="authors" Match="NavLinkMatch.All">
                    <i class="fa-solid fa-pen-nib fa-2x" aria-hidden="true"></i> 
                    <span style="font-size:1.1rem;">Authors</span>
                </NavLink>
            </div
            <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center gap-2" href="/books" Match="NavLinkMatch.All">
                    <i class="fa-solid fa-book fa-2x"></i> 
                    <span style="font-size:1.1rem;">Books</span>
                </NavLink>

            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center gap-2" href="borrows" Match="NavLinkMatch.All">
                    <i class="fa-solid fa-bars fa-2x"></i>
                    <span style="font-size:1.1rem;">Borrows</span>
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center gap-2" href="categories" Match="NavLinkMatch.All">
               <i class="fa-solid fa-folder-open fa-2x"></i>
               <span style="font-size:1.1rem;">Categories</span>
            </NavLink>
            </div>
          <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center gap-2" href="members" Match="NavLinkMatch.All">
               <i class="fa-solid fa-people-pulling fa-2x"></i>
               <span style="font-size:1.1rem;">Members</span>
            </NavLink>
        </div>
  </nav>
  </div>
@code {
    private AuthenticationState authState;
    private ClaimsPrincipal user;
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");

        if (AuthProvider is CustomAuthStateProvider customProvider)
        {
            customProvider.NotifyUserLogout();
        }

        Navigation.NavigateTo("/", forceLoad: true);
    }
}
